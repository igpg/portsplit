.TH PORTSPLIT 1 "2013-09-20" TCP\ port\ multiplexer
.SH NAME
.PP
portsplit \- a TCP port multiplexer
.SH SYNOPSIS
.PP
\f[B]portsplit\f[] <\f[I]filename\f[]>
.SH DESCRIPTION
.PP
The \f[B]portsplit\f[] program is designed to "multiplex" a TCP port,
that is, to allow to have several distinct services reachable behind a
single TCP port.
For instance, one can open a single TCP port so that clients connecting
to this port can reach a HTTP server, an IRC server or a PPP daemon,
depending on what they request upon connection.
.PP
The principle of \f[B]portsplit\f[] is simply to listen on a (set of)
local port(s) and decide what to do with each incoming connection based
on the first bytes sent by the connecting client.
It makes it comparable to the software \f[I]sslh\f[].
.PP
No protocol or service is hardcoded in \f[B]portsplit\f[]: its
configuration file must contain \f[B]patterns\f[], i.e.
sequences of bytes with which what the client sends will be compared.
If a pattern is matched by what a client sent, a corresponding action is
taken.
An action is taken as well if the client does not send any byte for some
period of time or if the bytes sent have no chance to match anything
defined in the configuration.
.PP
Actions must also be configured, and three of them are possible:
transparently forward the connection to a remote server; execute a local
process and forward its standard input/output from/to the client; close
the connection.
Closing the connection is not explicitly configurable and is the default
behavior if no pattern is matched and no fallback action has been
configured.
.PP
A set of patterns and a single action together define a \f[B]service\f[]
in the \f[B]portsplit\f[] configuration.
An "http" service could for instance have the string patterns "GET" and
"POST" and have the action of connecting to IP address ::1 on port 80,
i.e.
a locally running web server.
.PP
\f[B]Portsplit\f[] fully supports both IPv4 and IPv6.
.SH OPTIONS
.PP
<\f[B]filename\f[]>
.PP
Path to the configuration file.
.SH CONFIGURATION FILE
.PP
For those who know the \f[I]stunnel\f[] software,
\f[B]portsplit\f[]\[aq]s configuration file syntax is very similar,
although most of the options names and values are obviously different.
.PP
Each line of the configuration file can be either:
.IP \[bu] 2
an empty line or a line starting with \[aq]#\[aq] (comment), both being
ignored;
.IP \[bu] 2
an \[aq]option_name = option_value\[aq] pair (all blank spaces just
before and just after the \[aq]=\[aq] are ignored);
.IP \[bu] 2
\[aq][service_name]\[aq] indicating a start of service definition,
inside which a set of patterns and an action should be defined.
.PP
There are two special services:
.IP \[bu] 2
the service \f[I]fallback\f[] is activated when the connecting client
sent bytes that have no chance to match any of the other services
defined (if no \f[I]fallback\f[] service is defined at all,
\f[B]portsplit\f[] will close the connection);
.IP \[bu] 2
the service \f[I]timeout\f[] is activated when the connecting client did
not match any service after some amount of time (see \f[I]timeout\f[]
option below) but could theoretically match one if it sent more bytes,
for instance when the client did not send any data at all because it is
using a server\-talk\-first protocol (if not defined, the connection
will be closed if the timeout is hit).
.SS GLOBAL OPTIONS
.PP
\f[B]bind\f[] = <\f[I]IP\f[]>:<\f[I]port\f[]>
.PP
Specify a local address and port to bind.
\f[I]IP\f[] can be either an IPv4 or IPv6 in their standard or shortened
notation (for IPv6).
This option can be specified several times.
Both the IP and port specifications are mandatory.
The usual wildcards apply in order to listen on all interfaces:
\[aq]0.0.0.0\[aq] for IPv4 and \[aq]::\[aq] for IPv6.
.PP
Listening on all interfaces on both IPv4 and IPv6 on port 9090 is thus
done like this:
.IP
.nf
\f[C]
bind\ =\ 0.0.0.0:9090
bind\ =\ :::9090
\f[]
.fi
.PP
On the other hand, binding only the loopback interface, both in IPv4 and
IPv6, is done this way:
.IP
.nf
\f[C]
bind\ =\ 127.0.0.1:9090
bind\ =\ ::1:9090
\f[]
.fi
.PP
\f[B]maxconn\f[] = <\f[I]number\f[]>
.PP
Specify the maximum number of concurrent connections \f[B]portsplit\f[]
will accept.
When the maximum number is reached, the connection will be accepted and
immediately closed.
.PP
Note that \f[B]portsplit\f[] forks a new process after each new
connection, unless the maximum has been reached.
The forked process is in charge of matching a service and taking the
corresponding action.
.PP
\f[B]pid\f[] = <\f[I]filename\f[]>
.PP
Specify a filename that will contain the PID of \f[B]portsplit\f[]\[aq]s
main process.
It can be used to send signals to \f[B]portsplit\f[] such as HUP and
TERM to respectively re\-read the configuration and exit the program.
.PP
\f[B]timeout\f[] = <\f[I]seconds\f[]>
.PP
Specify the number of seconds after which the \f[I]timeout\f[] service
must be engaged if the client did not send enough data to match a
service nor to be sure that no service at all can be matched (in which
case the \f[I]fallback\f[] service would have been used).
.SS SERVICE\-LEVEL OPTIONS
.PP
At the service level, two types of options are distinguished and they
define respectively:
.IP \[bu] 2
which data to expect from a client in order to activate the given
service (\f[I]matching\f[] options);
.IP \[bu] 2
what to do once the service has been matched (\f[I]action\f[] options);
.SS Matching Options
.PP
\f[B]string\f[] = <\f[I]byte\f[] \f[I]sequence\f[]>
.PP
Will activate the service if the data sent by the client \f[B]starts
with\f[] \f[I]byte\f[] \f[I]sequence\f[].
It is important to remember that this sequence is compared exactly to
the first bytes sent by the client.
That is, if we want to match a client that sends \[aq]GET /
HTTP/1.1\[aq], we must not use \[aq]HTTP\[aq] in \f[I]byte\f[]
\f[I]sequence\f[] but \[aq]GET\[aq].
.PP
It is possible to specify non\-printable bytes by using the syntax
\[aq]\\\f[I]XX\f[]\[aq] where \f[I]XX\f[] is the byte\[aq]s hexadecimal
code.
.PP
Since spaces on each side of the \[aq]=\[aq] are ignored, matching a
string that starts with a space must be done by using its hexadecimal
code, \[aq]\\20\[aq].
.SS Action Options
.PP
\f[B]connect\f[] = <\f[I]host\f[]>:<\f[I]port\f[]>
.PP
Connects to the given \f[I]host\f[]:\f[I]port\f[] pair (an IPv4 or IPv6
may also be specified).
Use this option only once for each service.
It is mutually exclusive with the \f[I]exec\f[] option.
.PP
Once the connection is established, the data is transparently proxied
between the client and the server.
The first bytes that may have been sent by the client that allowed
\f[B]portsplit\f[] to match the service are buffered and sent to the
server upon connection.
.PP
\f[B]exec\f[] = <\f[I]command\f[]>
.PP
Execute a command, feed its standard entry with the client\[aq]s data
and send its standard output to the client.
Use this option only once for each service.
It is mutually exclusive with the \f[I]connect\f[] option.
.PP
The first bytes that may have been sent by the client that allowed
\f[B]portsplit\f[] to match the service are buffered and sent to the new
process\[aq] standard entry as soon as the process is started.
.PP
The new process is started using the standard fork\-exec method.
.PP
\f[B]execarg\f[] = <\f[I]string\f[]>
.PP
Specify one (and only one) argument to the command given in the
\f[I]exec\f[] option.
It may be used several times and may contain spaces.
Arguments are passed to the command in the same order as they appear in
the configuration.
.PP
\f[B]pty\f[] = yes|no
.PP
Provide a pseudoterminal (pty) to the process started by \f[I]exec\f[].
Defaults to \[aq]no\[aq].
.SH SIGNALS
.PP
The main process of \f[B]portsplit\f[] intercepts some signals.
.PP
\f[B]SIGTERM\f[] and \f[B]SIGINT\f[] (Ctrl\-C) make \f[B]portsplit\f[]
remove its PID file (if defined), close file descriptors, free memory
and exit.
.PP
\f[B]SIGHUP\f[] triggers the reload of the configuration file, which
implies closing all listening sockets and re\-opening them after
re\-reading the configuration file.
The PID file is quickly deleted and re\-written, using the (possibly
new) \f[I]pid\f[] setting.
Already open connections are not closed by SIGHUP, as child processes
ignore this signal.
.SH LIMITATIONS
.PP
There are known limitations in \f[B]portsplit\f[].
.PP
First of all, do not rely on \f[B]portsplit\f[] to differentiate
protocols where the server is supposed to talk first.
This is simply due to the fact that \f[B]portsplit\f[] requires the
client to send bytes in order to decide where to forward the connection.
All clients expecting a server to talk first will fall in the
\f[I]timeout\f[] service and hence cannot be differentiated one from the
other.
.PP
The string matching is extremely dumb.
As explained in the \f[I]string\f[] configuration option, the start of a
specified byte sequence has to coincide with the first bytes sent by the
client.
It is not possible (yet?) to match a string that would appear in the
middle of something initially sent by the client while ignoring the
first bytes.
To go further, we should consider the ability to match Perl\-compatible
Regular Expressions.
.PP
Many other features are lacking, including a proper daemonization and a
proper flexible logging system.
.SH BUGS
.PP
In addition to the limitations, there may be bugs in what
\f[B]portsplit\f[] is supposed to do.
However, the main functionalities, composed of the matching system and
the bidirectional data forwarding, have shown to be working properly.
.PP
Please feel free to report bugs.
.SH SEE ALSO
.PP
Fix me!
.SH AUTHORS
KheOps <kheops@ceops.eu>.
